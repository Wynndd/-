/*
二叉树路径和 (10 分)
编写程序找出非空二叉树中和最大的路径，二叉树结点为不等于0的整数。
本题的“路径”定义为二叉树中的结点序列vi,……vj，序列中前一个结点是后一个结点的父结点，
但路径不一定是以根结点为起点，也不一定是以叶结点为终点。
路径的和定义为该路径所包含的所有结点的数据值之和。

输入格式:
输入为一组用空格间隔的整数，个数不超过100个，表示带空指针信息的二叉树先根序列。

输出格式:
输出为两行，第一行为该二叉树路径和的最大值，第二行为一组整数，每个整数后一个空格，表示该最大路径包含的结点值（按所在层数递增顺序输出）。如果存在多条满足条件的路径，则输出最短（包含结点个数最少）者，如果存在多条最短的路径，则输出最靠左上者。

输入样例1:
1 2 0 0 3 0 0
输出样例1:
4
1 3 
输入样例2:
-1 2 0 0 3 4 0 0 0
输出样例2:
7
3 4 
输入样例3:
3 2 0 0 -1 4 0 0 0
输出样例3:
6
3 -1 4 
*/
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct TreeNode{
	int data;
	struct TreeNode* left;
	struct TreeNode* right;
};
int max=0,maxpath[10000],maxlen=0;//max：最大路径值maxpath：储存最大路径上的数maxlen：最大路径长度 
typedef struct TreeNode *BinTree;
//FATHER函数
BinTree Father(BinTree t,BinTree p){
//p为给定结点；t指向root，搜索p的父亲； q指向p的父亲 
	BinTree q;
	if(t==NULL||p==NULL){
		q=NULL;
		return NULL;
	}
	if(t->left==p||t->right==p){
		q=t;
		return q;
	}
	else{
		q=Father(t->left,p);
		q=Father(t->right,p);
		if(q!=NULL){
			return q;
		}
	}
}
int pre[10000];//用于保存f(i-1)
int path[10000];//用于保存路径值 
int startm=0,endm=0,start=0,end=0;
void f(BinTree bt,BinTree root,int current){
	int s=0;
	if(bt==root||pre[current]<=0){
		s=bt->data;
		current++;
		pre[current]=s;
		path[current]=s;
		start=current;
		end=current;
		if(s>max||(s==max&&current-start+1<maxlen)){
			max=s;
			maxpath[0]=s;
			maxlen=1;
		}
	}
	else{
		if(pre[current]>0){
			s=pre[current]+bt->data;
			current++;
			pre[current]=s;
			path[current]=bt->data;
			if(s>max||(s==max&&current-start+1<maxlen)){
				int j=0;
				for(int i=start;i<=current;i++){
					maxpath[j]=path[i];
					j++;
				}
				max=s;
				maxlen=current-start+1;
			}
		}
	}
	if(bt->left!=NULL)f(bt->left,root,current);
	if(bt->right!=NULL)f(bt->right,root,current);
}
int Height(BinTree bt){
	if(bt==NULL){
		return 0;
	}
	else{
		if(Height(bt->left)>Height(bt->right)){
			return (Height(bt->left)+1);
		}
		else {
			return (Height(bt->right)+1);
		}
	}
}
BinTree CreateTree(){
	char put;
	int ch;
	scanf("%d",&ch);
	BinTree root; 
	if(ch==0){
		root=NULL;
		return root;
	}
	else{
		root=(BinTree)malloc(sizeof(struct TreeNode));
		root->data=ch;
		root->left=CreateTree();
		root->right=CreateTree();
		return root;
	}
}
int main(){
	int i=0;
	BinTree root;
	root=CreateTree();
	BinTree bt=root;
	f(bt,root,0);
	printf("%d",max);
	printf("\n");
	for(i=0;i<maxlen;i++){
		printf("%d ",maxpath[i]);
	}
	return 0;
}