/*路由器 (10 分)
快速的信息传送已经成为必须。信息传送工作由位于网络节点上的路由器来实现。
每个路由器都维护一个“路由器表”，给出它可以直接到达的路由器编号。
很明显，信息传送要求经过的路由器最少（也被称为“跳数”）。对于给出的网络，
要求编写程序发现从信息源到目标节点的最佳路线（最少跳数）。
假定n个路由器编号为0至n-1，网络中路由器数目不超过200，且至少有2个路由器，
每个路由器最多和50个路由器直接相连。

输入格式:
输入包含多组测试数据。每组数据输入第一行为整数n和m，表示网络中路由器数。
接下来n行表示每个路由器可直接到达的路由器ID列表，每行为一组空格间隔的整数，格式为i k v1 v2...vk，
其中i表示路由器编号，k为路由器i可直接到达的路由器数，接下来k个数 v1 v2 ... vk表示路由器i可直接到
达的路由器编号。
接下来m行，表示m组查询，每行两个整数a和b，表示起始路由器和终点路由器编号。

提示：可使用EOF判断输入结束

输出格式:
对每组测试数据，输出m行，每行为信息从路由器a传送到路由器b所需经过的最小跳数，
如果不可能进行信息传送（起始路由器和终点路由器不连通），则输出“connection impossible”。

输入样例:
6 2
0 5 1 2 3 4 5
1 0
2 0
3 0
4 0
5 0
0 2
1 2
4 2
0 2 1 2
1 2 2 3
2 1 3 
3 1 2
0 3
1 0
输出样例:
1
connection impossible
2
connection impossible
*/

#include<iostream>
#include<stdlib.h>
#include<string.h>
#define INFINITY 65535
using namespace std;
//边结点的结构体 
struct Edge{
	int VerAdj;//邻接顶点序号，从0开始编号 注意：单向的图 只有一个点 
	int cost;//边的权值
	Edge *link;//指向下一个边结点的指针 
};
//顶点表中结点的结构体 
struct Vertex{
	int VerName;//顶点名称
	Edge *adjacent;//边链表的头指针 
};
//图结构体 
struct Graph_List{
	Vertex *Head;//顶点表头指针，即一个数组存储vertex 
	int graphsize;//图中当前顶点个数 
};
Graph_List CreateGraph(int n){
	Graph_List Graph;
	int j=0,k=0;
	int from=0,to=0;
	Graph.graphsize=n;//输入顶点的个数，即n 
	Graph.Head=new Vertex[20000];
	for(int i=0;i<n;i++){//初始化 
		Graph.Head[i].VerName=i; 
		Graph.Head[i].adjacent=NULL;
	}
	for(int i=0;i<n;i++){
		cin>>from>>k;//i=from;
		for(j=0;j<k;j++){
			cin>>to;
			Edge *p=new Edge;
			p->VerAdj=to;
			p->cost=1;
			p->link=NULL;
			Edge *q=Graph.Head[from].adjacent;
			if(q==NULL)//如果这个顶点里没有东西，只需要连p即可 
				Graph.Head[from].adjacent=p;
			else{
				while(q->link!=NULL)
					q=q->link;
				q->link=p;
			}
//			cout<<"imput success"<<to<<endl;
		}
	}
	return Graph;
}
void Connection(int n,int m){
	Graph_List Graph=CreateGraph(n);
	int i=0,j=0,t=0;//计数器 
	int a=0,b=0;
	int k=0,u=0;
	int *dist=new int[n],*path=new int[n];//dist为最短路径长度 
	int *visited=new int[n];
	for(t=0;t<m;t++){
		cin>>a>>b;//求a到b最小值
		for(i=0;i<n;i++){//初始化所有点 
			visited[i]=0;
			dist[i]=INFINITY;
			path[i]=-1;
		}
//		cout<<"a=="<<a<<endl; 
		dist[a]=0;
		visited[a]=1;
		Edge *p=Graph.Head[a].adjacent;
		u=a;
		for(j=0;j<n;j++){
			while(p!=NULL){
				k=p->VerAdj;
				if(visited[k]!=1&&dist[u]+p->cost<dist[k]){
					dist[k]=dist[u]+p->cost;
					path[k]=u;
				}
				p=p->link;
			}
			int ldist=INFINITY;
			for(i=0;i<n;i++)
				if(dist[i]>0&&dist[i]<ldist&&visited[i]==0){
					ldist=dist[i];u=i;
				}
			visited[u]=1;
			p=Graph.Head[u].adjacent;
		}
		if(dist[b]!=INFINITY)cout<<dist[b]<<endl;
		else cout<<"connection impossible"<<endl;
	}
}
int main(){
	int n,m;
	while(cin>>n>>m){
		Connection(n,m);
	}
	return 0;
} 