/*栈的实现及基本操作
给定一个初始为空的栈和一系列压栈、弹栈操作，请编写程序输出每次弹栈的元素。栈的元素值均为整数。

输入格式:
输入第1行为1个正整数n，表示操作个数；接下来n行，每行表示一个操作，格式为1 d或0。
1 d表示将整数d压栈，0表示弹栈。n不超过20000。

输出格式:
按顺序输出每次弹栈的元素，每个元素一行。
若某弹栈操作不合法（如在栈空时弹栈），则对该操作输出invalid。

输入样例:
7
1 1
1 2
0
0
0
1 3
0
输出样例:
2
1
invalid
3*/
#include<stdio.h>
#include<stdlib.h>
#define maxsize 20000
typedef int ElementType;
typedef struct SNode *stack;
struct SNode{
	ElementType Data;
	struct SNode *next;
};
stack CreateStack(){
	stack s;
	s=(stack)malloc(sizeof(struct SNode));
	s->next=NULL;
	return s;
}
int IsEmpty(stack s){
	return(s->next==NULL);
}
void Push(ElementType item,stack s){
	struct SNode *TmpCell;
	TmpCell=(struct SNode*)malloc(sizeof(struct SNode));
	TmpCell->Data=item;
	TmpCell->next=s->next;
	s->next=TmpCell;
}
ElementType Pop(stack s){
	struct SNode *FirstCell;
	ElementType TopElem;
	if(IsEmpty(s)){
		return NULL;
	}
	else{
		FirstCell=s->next;
		s->next=FirstCell->next;
		TopElem=FirstCell->Data;
		free(FirstCell);
		return TopElem;
	}
}
int main(){
	int i=0,n,item,operation,elemen;
	stack s=CreateStack();
	scanf("%d",&n);
	while(n--){
		scanf("%d",&operation);
		if(operation==1){
			scanf("%d",&item);
			Push(item,s);
		}
		if(operation==0){
			elemen=Pop(s);
			if(elemen==NULL)
				printf("invalid\n");
			else
				printf("%d\n",elemen);
		}
	}
	getchar();
	return 0;
}