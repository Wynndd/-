/*A 最小支撑树 (15 分)
给定一个包含n个顶点的正权无向图，编号为1至n。请编写程序求出其最小支撑树，并计算其边权之和。

输入格式:
输入包含多组数据。每组数据第一行为2个整数n和e，均不超过1500，分别表示图的顶点数和边数。
接下来e行表示每条边的信息，每行为3个非负整数a、b、c，其中a和b表示该边的端点编号，c表示权值，不超过100。
各边并非按端点编号顺序排列。

输出格式:
对于每组数据，若存在最小支撑树则输出一个整数，为最小支撑树各边权值之和；若不存在最小支撑树，则输出“There is no minimum spanning tree.”。

输入样例:
4 5
1 2 1
1 4 1
2 4 5
2 3 1
3 4 8
4 2
1 2 1
3 4 8
输出样例:
3
There is no minimum spanning tree.
*/
#include<iostream>
#include<stdlib.h>
#include<string.h>
#define INFINITY 65535
#define MaxVertexNum 1500
using namespace std;
typedef struct ENode *PtrToENode;
typedef PtrToENode Edge;
struct ENode{
	int v1,v2;//有向边v1,v2
	int weight;//权重 
}*TE=new ENode[100];
typedef struct GNode *PtrToGNode;
struct GNode{
	int Nv;//顶点个数 
	int Ne;//边个数 
	int G[100][100];//邻接矩阵
};
typedef PtrToGNode MGraph;

struct CNode{
	int vex;//连接到mst上的顶点
	int lowcost;//权值 
}*closedge=new CNode[100];

MGraph CreateGraph(int VertexNum){//初始化一个有VertexNum个顶点没有边的图 
	int v,w;
	MGraph Graph;
	Graph=(MGraph)malloc(sizeof(struct GNode));
	Graph->Nv=VertexNum;
	Graph->Ne=0;
	for(v=0;v<Graph->Nv;v++){
		for(w=0;w<Graph->Nv;w++){
			Graph->G[v][w]=INFINITY;
		}
	}
	return Graph;
}
MGraph BuildGraph(int n,int e,int a[],int b[],int c[]){//一共n个顶点，e条边;a[]起点b[]终点c[]权重 
	MGraph  Graph=CreateGraph(n);
	Edge E;//边 
	int V;//顶点 
	int i;
	Graph->Ne=e;//输入边的条数
	if(Graph->Ne!=0){//如果边数不为0 
		E=(Edge)malloc(sizeof(struct ENode));//建立边结点
		//读入边，格式为起点，终点；插入邻接矩阵
		for(i=0;i<e;i++){
			E->v1=a[i];
			E->v2=b[i];
			E->v1--;E->v2--;
			E->weight=c[i]; 
			Graph->G[E->v1][E->v2]=E->weight;//插入边v1v2为1 注意是无向图
			Graph->G[E->v2][E->v1]=E->weight;
	//		cout<<E->weight<<endl;
		}
	}
	return Graph; 
}
void MST(int n,int e){//n个顶点，e条边  
	int i,j,a[100],b[100],c[100];
	int sum=0;//求mst权值之和
	int count;//支撑树的边计数器
//	close closedge[100];
	for(i=0;i<e;i++){
		cin>>a[i]>>b[i]>>c[i];
	} 
	MGraph Graph=BuildGraph(n,e,a,b,c);
	for(i=0;i<n;i++){//初始化结点0，即第一个结点
		closedge[i].lowcost=Graph->G[0][i];
//		cout<<"?"<<endl;
		closedge[i].vex=0;//目前连接的都是定点0 
		closedge[0].vex=-1;
		count=1;
	}
//	cout<<"!!!"<<endl;
	for(i=0;i<n-1;i++){
		int min=INFINITY;//设置最小值
		int v=0;
		for(j=0;j<n;j++){
			if(closedge[j].vex!=-1&&closedge[j].lowcost<min){//求当前权值最小的边和该边的终点v 
				v=j;//记录v为最小点j--为这个i目前的终点 
				min=closedge[j].lowcost;//目前最小边是j上的 
			}
		}
		if(v!=0){//如果v==0，则找不到对应的点 
			TE[count].v1=closedge[v].vex;//起点是vex 
			TE[count].v2=v;//终点是v 
			TE[count].weight=closedge[v].lowcost;
			count++;//计数器++
			sum=sum+closedge[v].lowcost;
			closedge[v].lowcost=0;
			closedge[v].vex=-1;//变成图中的一个点了
			for(j=0;j<n;j++){//将更多能够到的边的数据加入，注意这个时候v已经不是0了，能够到更多点了 
				if(closedge[j].vex!=-1&&Graph->G[v][j]<closedge[j].lowcost){
					closedge[j].lowcost=Graph->G[v][j];//寻找另外一个更小的边 
					closedge[j].vex=v;
				}
			}
		}
	}
//	cout<<"count="<<count<<endl;
	if(count!=n){//MST中收入顶点不到n个 
		cout<<"There is no minimum spanning tree."<<endl;
		return; 
	}
	else{
		cout<<sum<<endl;
	}
}
int main(){
	int n,e;
	while(cin>>n>>e){  
		MST(n,e);
	}
	return 0;
}