/*二叉树的创建与遍历 (5 分)
通过带空指针信息的先根序列（亦称先序序列）创建二叉树，并进行先根（先序）、中根（中序）、后根（后序）遍历。二叉树结点数据域值为不等于0的整数（可能是正数也可能是负数），空指针用0表示，例如1 5 8 0 0 0 6 0 0表示如下图的二叉树。


输入格式:
输入为一组用空格间隔的整数，表示带空指针信息的二叉树先根序列。其中空指针信息用0表示。二叉树结点个数不超过150000，高度不超过6000。输入数据保证二叉树各结点数据值互不相等。

输出格式:
输出为3行整数，每个整数后一个空格。第1行为该二叉树的先根序列，第2行为中根序列，第3行为后根序列。

输入样例:
1 5 8 0 0 0 6 0 0
结尾无空行
输出样例:
1 5 8 6 
8 5 1 6 
8 5 6 1 
结尾无空行*/
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct TreeNode{
	int data;
	struct TreeNode* left;
	struct TreeNode* right;
};
typedef struct TreeNode *BinTree;
BinTree CreateTree(){
	char put;
	int ch;
	scanf("%d",&ch);
	BinTree root; 
	if(ch==0){
		root=NULL;
		return root;
	}
	else{
		root=(BinTree)malloc(sizeof(struct TreeNode));
		root->data=ch;
		root->left=CreateTree();
		root->right=CreateTree();
		return root;
	}
}
void PreOrderTravel(BinTree bt){
	if(bt!=NULL)printf("%d ",bt->data);
	if(bt->left!=NULL)PreOrderTravel(bt->left);
	if(bt->right!=NULL)PreOrderTravel(bt->right);
}
void MidOrderTravel(BinTree bt){
	if(bt->left!=NULL)MidOrderTravel(bt->left);
	if(bt!=NULL)printf("%d ",bt->data);
	if(bt->right!=NULL)MidOrderTravel(bt->right);
}
void PostOrderTravel(BinTree bt){
	if(bt->left!=NULL)PostOrderTravel(bt->left);
	if(bt->right!=NULL)PostOrderTravel(bt->right);
	if(bt!=NULL)printf("%d ",bt->data);
}
int main(){
	BinTree root;
	root=CreateTree();
	PreOrderTravel(root);
	printf("\n");
	MidOrderTravel(root);
	printf("\n");
	PostOrderTravel(root);
	return 0;
}